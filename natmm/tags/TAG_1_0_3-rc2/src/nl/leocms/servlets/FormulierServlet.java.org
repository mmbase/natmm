/*
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is LeoCMS.
 *
 * The Initial Developer of the Original Code is
 * 'De Gemeente Leeuwarden' (The dutch municipality Leeuwarden).
 *
 * See license.txt in the root of the LeoCMS directory for the full license.
 */
package nl.leocms.servlets;

import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

import org.mmbase.bridge.ContextProvider;
import org.mmbase.bridge.CloudContext;
import org.mmbase.bridge.Cloud;
import org.mmbase.bridge.Node;
import org.mmbase.bridge.NodeIterator;
import org.mmbase.bridge.NodeList;
import com.finalist.mmbase.util.CloudFactory;

import org.apache.commons.fileupload.DiskFileUpload;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import nl.leocms.util.FormulierVeld;
import nl.leocms.util.ByteArrayDataSource;
import nl.leocms.util.PropertiesUtil;

public class FormulierServlet extends HttpServlet {
   
   static int maxFileSize = 1024 * 1024;  // 1 Meg
   
   public final static String FIELD_PREFIX = "field_";
   
   public void init(ServletConfig servletconfig) throws ServletException {
      super.init(servletconfig);
      maxFileSize = Integer.parseInt(PropertiesUtil.getProperty("maxuploadfilesize"));
   }

   public void doGet(HttpServletRequest request, HttpServletResponse response) 
         throws ServletException, IOException {
      doPost(request, response);
   }

   public void doPost(HttpServletRequest request, HttpServletResponse response)
         throws ServletException, IOException {
      Hashtable errorMessages = new Hashtable();
      List fileItems = null;
      try {
         DiskFileUpload upload = new DiskFileUpload();
         upload.setSizeMax(maxFileSize);
         
         // Parse the request into a list of FileItems
         fileItems = upload.parseRequest(request);
      }
      catch (FileUploadException fue) {
         System.out.println("fue = " + fue);
      }
      
      // first get de nodenumber of the formulier
      String nodeNumber = null;
      String objectNumber = null;
      String paginaNumber = null;
      String rubriekNumber = null;
      String referPagina = null;
      Iterator iter = fileItems.iterator();
      while (iter.hasNext()) {
          FileItem item = (FileItem) iter.next();
          String fieldName = item.getFieldName();
          if ((fieldName != null) && (fieldName.equals("nodenumber"))) {
            nodeNumber = item.getString();
          }
          if ((fieldName != null) && (fieldName.equals("objectnumber"))) {
            objectNumber = item.getString();
          }
          if ((fieldName != null) && (fieldName.equals("paginanumber"))) {
            paginaNumber = item.getString();
          }
          if ((fieldName != null) && (fieldName.equals("rubrieknumber"))) {
            rubriekNumber = item.getString();
          }
          if ((fieldName != null) && (fieldName.equals("referpagina"))) {
            referPagina = item.getString();
          }
      }
      System.out.println("referPagina = " + referPagina);
      StringBuffer emailText = new StringBuffer();
      StringBuffer emailCsv = new StringBuffer();
      Hashtable emailAttachments = new Hashtable();
      int counter = 0;
      if (nodeNumber == null) {
         errorMessages.put("nodenumber", "formulier.onbekend");
      }
      else {
         
         // get all formuliervelden from formulier with nodenumber
         Hashtable fieldTable = getFields(nodeNumber);
         
         if ((fieldTable == null) || (fieldTable.size() <= 0)) {
            errorMessages.put("nodenumber", "formulier.geenvelden");
         }
         else {
            Iterator fileIter = fileItems.iterator();
            
            // get all data from formulier with form name starting with FIELD_PREFIX field_
            // Put all data in a StringBuffer preparing for the email to send.
            // Also put all uploaded files in list for sending with the email
            
            // if things go wrong put already the filled in content to the request
            while (fileIter.hasNext()) {
               
               FileItem fileItem = (FileItem) fileIter.next();
               String fieldName = fileItem.getFieldName();
               
               if ((fieldName == null) || (!fieldName.startsWith(FIELD_PREFIX))) {
                  continue;
               }
               String fieldNodeNumber = fieldName.replaceAll(FIELD_PREFIX, "");
      
               FormulierVeld formulierVeld = (FormulierVeld)fieldTable.get(fieldNodeNumber);
               
               if (formulierVeld == null) {
                  // veld zonder prefix_, deze overslaan
                  continue;
               }
               
               // veld type
               Integer fieldType = formulierVeld.getFieldType();
               //veld label
               String fieldLabel = formulierVeld.getLabel();
               // veld verplicht
               boolean fieldVerplicht = formulierVeld.isVerplicht();
               
               // attachment type
               if (fieldType.intValue() == 1) {
                  String filename = fileItem.getName();
                  request.setAttribute(fieldName, filename);
                  int index = filename.lastIndexOf("\\");
                  if (index < 0) {
                     index = filename.lastIndexOf("/");
                  }
                  if (index > 0) {
                     filename = filename.substring(index + 1, filename.length());
                  }
                  if ((filename != null) && (!filename.trim().equals(""))) {
                     byte[] file = fileItem.get();
                     emailText.append(fieldLabel);
                     emailText.append(": ");
                     emailText.append(filename);
                     emailText.append("\n");
                     
                     emailCsv.append(++counter + ";");
                     emailCsv.append(fieldLabel);
                     emailCsv.append(";");
                     emailCsv.append(filename);
                     emailCsv.append("\n");
                     if (file.length <= 0) {
                        errorMessages.put(fieldName, "formulierveld.geen.geldig.bestand");
                     }
                     else {
                        ByteArrayDataSource bads = new ByteArrayDataSource(file, fileItem.getContentType(), filename);
                        emailAttachments.put(filename, bads);
                     }
                  }
                  else if (fieldVerplicht) {
                     errorMessages.put(fieldName, "formulierveld.niet.ingevuld");
                  }
               }
               // checkbox type
               // ingevulde waarde omzetten naar ja/nee
               else if (fieldType.intValue() == 2) {
                  request.setAttribute(fieldName, fileItem.getString());
                  String value = fileItem.getString();
                  value = (value == null) ? "nee" : ((value.equalsIgnoreCase("on")) ? "ja" : "nee");
                  emailText.append(fieldLabel);
                  emailText.append(": ");
                  emailText.append(value);
                  emailText.append("\n");
                  
                  emailCsv.append(++counter + ";");
                  emailCsv.append(fieldLabel);
                  emailCsv.append(";");
                  emailCsv.append(value);
                  emailCsv.append("\n");                  
               }
               // Ingevulde waarde tonen
               else {
                  request.setAttribute(fieldName, fileItem.getString());
                  String value = fileItem.getString();
                  if ((value != null) && (!value.trim().equals(""))) {
                     emailText.append(fieldLabel);
                     emailText.append(": ");
                     emailText.append(value);
                     emailText.append("\n");
                     
                     emailCsv.append(++counter + ";");
                     emailCsv.append(fieldLabel);
                     emailCsv.append(";");
                     emailCsv.append(value.replaceAll("\r|\n"," "));
                     emailCsv.append("\n");                     
                  }
                  else if (fieldVerplicht) {
                     errorMessages.put(fieldName, "formulierveld.niet.ingevuld");
                  }
               }
            }
         }
      }
      
      emailText.append("\n\nDe volgende tekst is bedoeld voor automatische verwerking.\n\n");
      emailText.append("#BEGIN_CSV#");
      emailText.append(emailCsv);
      emailText.append("#END_CSV#");
      
      String url = UrlConverter.ROOT_TEMPLATE + "?paginanumber="+paginaNumber+"&rubrieknumber="+rubriekNumber;
      if ((objectNumber != null) && (!objectNumber.equals(""))) {
         url += "&objectnumber="+objectNumber;
      }
      if ((referPagina != null) && (!referPagina.equals(""))) {
         url += "&referpagina="+referPagina;
      }
      RequestDispatcher dispatcher = null;
      if (errorMessages.size() > 0) {
         request.setAttribute("errormessages", errorMessages);
         dispatcher = getServletContext().getRequestDispatcher(url);
      }
      else {
         request.setAttribute("succeeded", "true");
         sendEmail(nodeNumber, emailText, emailAttachments);
         dispatcher = getServletContext().getRequestDispatcher(url);
      }
        dispatcher.forward(request, response);
   }
   
   private void sendEmail(String nodeNumber, StringBuffer emailText, Hashtable emailAttachments) {
      String[] formulierData = getFormulierData(nodeNumber);
      
      if (formulierData == null) {
         return;
      }
      ArrayList receivers = new ArrayList();
      StringTokenizer st = new StringTokenizer(formulierData[1], ";");
      
      emailText.insert(0, "\n\n");
      emailText.insert(0, formulierData[0]);
      emailText.insert(0, "Titel: ");

      Cloud cloud = CloudFactory.getCloud();
      Node emailNode = cloud.getNodeManager("email").createNode();
      emailNode.setValue("from", PropertiesUtil.getProperty("mail.sender.email"));
      emailNode.setValue("subject", formulierData[2]);
      emailNode.setValue("replyto", PropertiesUtil.getProperty("mail.sender.email"));
      emailNode.setValue("body",emailText.toString());
      emailNode.commit();
      // hh todo: emailAttachments
      while (st.hasMoreTokens()) {
        emailNode.setValue("to", (String) st.nextToken());
        emailNode.commit();
        emailNode.getValue("mail(oneshot)");
      }
   }
   
   private Hashtable getFields(String nodeNumber) {
      NodeList formFieldNodeList = getCloud().getList(nodeNumber,
            "formulier,posrel,formulierveld", 
            "formulierveld.number,formulierveld.type,formulierveld.label", 
            null, null, null, null, true);
      NodeIterator formFieldListIterator = formFieldNodeList.nodeIterator();

      Hashtable formFields = new Hashtable();
      while (formFieldListIterator.hasNext()) {
         Node formFieldNode = formFieldListIterator.nextNode();
         String formFieldNodeNumber = "" + formFieldNode.getValue("formulierveld.number");
         Integer formFieldType = (Integer)formFieldNode.getValue("formulierveld.type");
         String formFieldLabel = "" + formFieldNode.getValue("formulierveld.label");
         Integer formFieldVerplcht = (Integer)formFieldNode.getValue("formulierveld.verplicht");
         formFields.put(formFieldNodeNumber, new FormulierVeld(formFieldType, formFieldLabel, formFieldVerplcht));
      }
      return formFields;
   }
   
   private String[] getFormulierData(String nodeNumber) {
      Node formulierNode = getCloud().getNode(nodeNumber);

      if (formulierNode == null) {
         return null;
      }
      String[] formData = new String[3];
      formData[0] = formulierNode.getStringValue("titel");
      formData[1] = formulierNode.getStringValue("emailadressen");
      formData[2] = formulierNode.getStringValue("emailonderwerp");
      return formData;
   }
   
   private Cloud getCloud() {
      final CloudContext context = ContextProvider.getCloudContext("local");
      return context.getCloud("mmbase");
   }
}