/*
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is LeoCMS.
 *
 * The Initial Developer of the Original Code is
 * 'De Gemeente Leeuwarden' (The dutch municipality Leeuwarden).
 *
 * See license.txt in the root of the LeoCMS directory for the full license.
 */
package nl.leocms.builders;

import nl.leocms.util.ContentTypeHelper;
import nl.leocms.versioning.*;
import org.mmbase.bridge.*;
import org.mmbase.module.core.*;
import org.mmbase.util.logging.*;
import com.finalist.mmbase.util.CloudFactory;

/**
 * Main class that publishes or removes nodes to or from remote clouds.
 * @author Kees Jongenburger
 * @version PublishingQueueBuilder.java,v 1.2 2003/07/28 09:43:51 nico Exp
 */
public class PublishingQueueBuilder extends MMObjectBuilder implements Runnable {
   private static Logger log = Logging.getLoggerInstance(PublishingQueueBuilder.class.getName());

   //Object sync;
   private static Thread thread = null;
   int remoteCloudNumber = -1;
   String remoteCloudName;

   /**
    * MMBase builder init method. This method first looks for the
    * cloudlist property in the builder xml
    * starts a new publishing Tread.
    **/
   public boolean init() {
      if (((getInitParameter("cloudlist") != null)) && (!getInitParameter("cloudlist").equals(""))) {
         remoteCloudName = getInitParameter("cloudlist");
         log.info("remote cloud wil be " + remoteCloudName);
      } 
      else {
         remoteCloudName = null;
         log.warn("cloudlist parameter missing publishing disabled");
      }

      //sync = new String("sync");
      if (thread == null) {
         thread = new Thread(this);
         thread.setDaemon(true);
         thread.start();
      } 
      else {
         log.warn("init() method of the PublishingQueueBuilder was called multiple times");
      }

      return super.init();
   }

   public boolean commit(MMObjectNode objectNodenode) {
      boolean retval = super.commit(objectNodenode);
      return retval;
   }

   public void setDefaults(MMObjectNode node) {
      node.setValue("timestamp", System.currentTimeMillis() / 1000);

      if ((remoteCloudNumber == -1) && (remoteCloudName != null)) {
         remoteCloudNumber = CloudManager.getCloudNumber(CloudFactory.getCloud(), remoteCloudName);
      }

      node.setValue("destinationcloud", remoteCloudNumber);
      node.setValue("status", "init");
   }

   public void run() {
      log.info("Publishing Queue initialised");
      try {
         Thread.sleep(60 * 1000);
      } 
      catch (InterruptedException e) {
         log.warn("Interupted while sleeping , continuning");
      }
      
      while (true) {
         //firt alway's sleep for 60 seconds
         //1- to give mmbase a chance to startup (arggg)
         //2- hope that more nodes will be added at the same time
         try {
            Thread.sleep(30 * 1000);
         } 
         catch (InterruptedException e) {
            log.warn("Interupted while sleeping , continuning");
         }

         if (remoteCloudName == null) {
            log.warn("publising disabled");
         } 
         else {
            log.debug("Publishing Queue - start publishing");
            
            Cloud cloud = CloudFactory.getCloud();
            NodeList list = cloud.getNodeManager("publishqueue").getList("[status] != 'fail' and [status] != 'done'", null, null);

            for (int x = 0; x < list.size(); x++) {
               Node node = list.getNode(x);
               try {
                  if (node.getStringValue("action").equalsIgnoreCase("update")) {
                     try {
                        if (isAllowedToPublish(node)) {
                           publish(node);
                           node.setStringValue("status", "done");
                           node.commit();
                        }
                     } 
                     catch (BridgeException e) {
                        log.error("Nodenumber : " + node.getNumber() + ", " + e);
                        node.setStringValue("status", "fail");
                        node.commit();
                     }
                  } 
                  else if (node.getStringValue("action").equalsIgnoreCase("remove")) {
                     removeNode(node);
                  }
               }
               catch (Throwable e) {
                  log.error("Throwable error with nodenumber: " + node.getNumber() + ", " + e.getMessage());
                  log.debug(Logging.stackTrace(e));
               }         
            }
            log.debug("Publishing Queue - publishing done");
         }
      }
   }

   /** !!!!! leocms.nl code !!!!!!!
    * 
    * @param publishQueueNode
    * @return
    */
   private boolean isAllowedToPublish(Node publishQueueNode) {
      Cloud cloud = CloudFactory.getCloud();
      int number = publishQueueNode.getIntValue("sourcenumber");
      Node node = cloud.getNode(number);
      if (ContentTypeHelper.isContentElement(node)) {
         int embargo = node.getIntValue("embargo");
         return embargo == -1 || embargo < (System.currentTimeMillis() / 1000);
      }
      else {
         return true;
      }
   }
   
   private void publish(Node publishQueueNode) {
      int number = publishQueueNode.getIntValue("sourcenumber");
      int cloudNumber = publishQueueNode.getIntValue("destinationcloud");
      Cloud cloud = CloudFactory.getCloud();
      Cloud remoteCloud = CloudManager.getCloud(cloud, cloudNumber);
      Node node = cloud.getNode(number);
      String nodeManagerName = node.getNodeManager().getName();
      PublishManager pm = new PublishManager();

      try {
         if (!PublishManager.isImported(node)) {
            if (PublishManager.isPublished(node)) {
               if (node instanceof Relation) {
                  log.debug(nodeManagerName + " update relation with number " +
                     number);
               } else {
                  log.debug(nodeManagerName + " update node with number " +
                     number);
               }

               PublishManager.updatePublishedNodes(node);
            } else {
               if (node instanceof Relation) {
                  log.debug(nodeManagerName + " publish relation with number " +
                     number);
               } else {
                  log.debug(nodeManagerName + " publish node with number " +
                     number);
               }

               PublishManager.publishNode(node, remoteCloud);
            }
         }
         else {
            log.debug("imported node in publishqueue " + node.getNumber());
         }
      } catch (Exception e) {
         throw new BridgeException("PublishManager could not publish " + node.getNumber(), e);
      }
   }

   private void removeNode(Node publishQueueNode) {
      int number = publishQueueNode.getIntValue("sourcenumber");
      int cloudNumber = publishQueueNode.getIntValue("destinationcloud");

      Cloud cloud = CloudFactory.getCloud();

      PublishManager pm = new PublishManager();

      try {
         PublishManager.deletePublishedNode(cloud, number);
         publishQueueNode.setStringValue("status", "done");
         publishQueueNode.commit();
      } 
      catch (Exception e) {
         log.debug(e.getMessage());
         publishQueueNode.setStringValue("status", "fail");
         publishQueueNode.commit();
      }
   }
}